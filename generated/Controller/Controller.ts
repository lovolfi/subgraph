// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BurnShort extends ethereum.Event {
  get params(): BurnShort__Params {
    return new BurnShort__Params(this);
  }
}

export class BurnShort__Params {
  _event: BurnShort;

  constructor(event: BurnShort) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get vaultId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DepositCollateral extends ethereum.Event {
  get params(): DepositCollateral__Params {
    return new DepositCollateral__Params(this);
  }
}

export class DepositCollateral__Params {
  _event: DepositCollateral;

  constructor(event: DepositCollateral) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FeeRateUpdated extends ethereum.Event {
  get params(): FeeRateUpdated__Params {
    return new FeeRateUpdated__Params(this);
  }
}

export class FeeRateUpdated__Params {
  _event: FeeRateUpdated;

  constructor(event: FeeRateUpdated) {
    this._event = event;
  }

  get oldFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FeeRecipientUpdated extends ethereum.Event {
  get params(): FeeRecipientUpdated__Params {
    return new FeeRecipientUpdated__Params(this);
  }
}

export class FeeRecipientUpdated__Params {
  _event: FeeRecipientUpdated;

  constructor(event: FeeRecipientUpdated) {
    this._event = event;
  }

  get oldFeeRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newFeeRecipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Liquidate extends ethereum.Event {
  get params(): Liquidate__Params {
    return new Liquidate__Params(this);
  }
}

export class Liquidate__Params {
  _event: Liquidate;

  constructor(event: Liquidate) {
    this._event = event;
  }

  get liquidator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get debtAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get collateralPaid(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MintShort extends ethereum.Event {
  get params(): MintShort__Params {
    return new MintShort__Params(this);
  }
}

export class MintShort__Params {
  _event: MintShort;

  constructor(event: MintShort) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get vaultId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NormalizationFactorUpdated extends ethereum.Event {
  get params(): NormalizationFactorUpdated__Params {
    return new NormalizationFactorUpdated__Params(this);
  }
}

export class NormalizationFactorUpdated__Params {
  _event: NormalizationFactorUpdated;

  constructor(event: NormalizationFactorUpdated) {
    this._event = event;
  }

  get oldNF(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newNF(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lastModifiedTimestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OpenVault extends ethereum.Event {
  get params(): OpenVault__Params {
    return new OpenVault__Params(this);
  }
}

export class OpenVault__Params {
  _event: OpenVault;

  constructor(event: OpenVault) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RedeemLong extends ethereum.Event {
  get params(): RedeemLong__Params {
    return new RedeemLong__Params(this);
  }
}

export class RedeemLong__Params {
  _event: RedeemLong;

  constructor(event: RedeemLong) {
    this._event = event;
  }

  get redeemer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get wPowerPerpAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get payoutAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RedemptionDiscountUpdated extends ethereum.Event {
  get params(): RedemptionDiscountUpdated__Params {
    return new RedemptionDiscountUpdated__Params(this);
  }
}

export class RedemptionDiscountUpdated__Params {
  _event: RedemptionDiscountUpdated;

  constructor(event: RedemptionDiscountUpdated) {
    this._event = event;
  }

  get vaultId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get redemptionDiscount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateOperator extends ethereum.Event {
  get params(): UpdateOperator__Params {
    return new UpdateOperator__Params(this);
  }
}

export class UpdateOperator__Params {
  _event: UpdateOperator;

  constructor(event: UpdateOperator) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get operator(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class WithdrawCollateral extends ethereum.Event {
  get params(): WithdrawCollateral__Params {
    return new WithdrawCollateral__Params(this);
  }
}

export class WithdrawCollateral__Params {
  _event: WithdrawCollateral;

  constructor(event: WithdrawCollateral) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Controller__liquidateResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Controller__mintPowerPerpAmountResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Controller__vaultsResultVaultStruct extends ethereum.Tuple {
  get operator(): Address {
    return this[0].toAddress();
  }

  get collateralAmount(): BigInt {
    return this[1].toBigInt();
  }

  get shortAmount(): BigInt {
    return this[2].toBigInt();
  }

  get redemptionDiscount(): BigInt {
    return this[3].toBigInt();
  }
}

export class Controller extends ethereum.SmartContract {
  static bind(address: Address): Controller {
    return new Controller("Controller", address);
  }

  FUNDING_PERIOD(): BigInt {
    let result = super.call("FUNDING_PERIOD", "FUNDING_PERIOD():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FUNDING_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FUNDING_PERIOD",
      "FUNDING_PERIOD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TWAP_PERIOD(): BigInt {
    let result = super.call("TWAP_PERIOD", "TWAP_PERIOD():(uint32)", []);

    return result[0].toBigInt();
  }

  try_TWAP_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("TWAP_PERIOD", "TWAP_PERIOD():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burnPowerPerpAmount(
    _vaultId: BigInt,
    _powerPerpAmount: BigInt,
    _withdrawAmount: BigInt
  ): BigInt {
    let result = super.call(
      "burnPowerPerpAmount",
      "burnPowerPerpAmount(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromUnsignedBigInt(_powerPerpAmount),
        ethereum.Value.fromUnsignedBigInt(_withdrawAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_burnPowerPerpAmount(
    _vaultId: BigInt,
    _powerPerpAmount: BigInt,
    _withdrawAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "burnPowerPerpAmount",
      "burnPowerPerpAmount(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromUnsignedBigInt(_powerPerpAmount),
        ethereum.Value.fromUnsignedBigInt(_withdrawAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeRate(): BigInt {
    let result = super.call("feeRate", "feeRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeRate", "feeRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeRecipient(): Address {
    let result = super.call("feeRecipient", "feeRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeRecipient", "feeRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDenormalizedMark(_period: BigInt): BigInt {
    let result = super.call(
      "getDenormalizedMark",
      "getDenormalizedMark(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_period)]
    );

    return result[0].toBigInt();
  }

  try_getDenormalizedMark(_period: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDenormalizedMark",
      "getDenormalizedMark(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_period)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDenormalizedMarkForFunding(_period: BigInt): BigInt {
    let result = super.call(
      "getDenormalizedMarkForFunding",
      "getDenormalizedMarkForFunding(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_period)]
    );

    return result[0].toBigInt();
  }

  try_getDenormalizedMarkForFunding(
    _period: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDenormalizedMarkForFunding",
      "getDenormalizedMarkForFunding(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_period)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExpectedNormalizationFactor(): BigInt {
    let result = super.call(
      "getExpectedNormalizationFactor",
      "getExpectedNormalizationFactor():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getExpectedNormalizationFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExpectedNormalizationFactor",
      "getExpectedNormalizationFactor():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getIndex(_period: BigInt): BigInt {
    let result = super.call("getIndex", "getIndex(uint32):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_period)
    ]);

    return result[0].toBigInt();
  }

  try_getIndex(_period: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getIndex", "getIndex(uint32):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_period)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUnscaledIndex(_period: BigInt): BigInt {
    let result = super.call(
      "getUnscaledIndex",
      "getUnscaledIndex(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_period)]
    );

    return result[0].toBigInt();
  }

  try_getUnscaledIndex(_period: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUnscaledIndex",
      "getUnscaledIndex(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_period)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  indexScale(): BigInt {
    let result = super.call("indexScale", "indexScale():(uint256)", []);

    return result[0].toBigInt();
  }

  try_indexScale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("indexScale", "indexScale():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isVaultSafe(_vaultId: BigInt): boolean {
    let result = super.call("isVaultSafe", "isVaultSafe(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_vaultId)
    ]);

    return result[0].toBoolean();
  }

  try_isVaultSafe(_vaultId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isVaultSafe", "isVaultSafe(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_vaultId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastFundingUpdateTimestamp(): BigInt {
    let result = super.call(
      "lastFundingUpdateTimestamp",
      "lastFundingUpdateTimestamp():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastFundingUpdateTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastFundingUpdateTimestamp",
      "lastFundingUpdateTimestamp():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidate(
    _vaultId: BigInt,
    _maxDebtAmount: BigInt
  ): Controller__liquidateResult {
    let result = super.call(
      "liquidate",
      "liquidate(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromUnsignedBigInt(_maxDebtAmount)
      ]
    );

    return new Controller__liquidateResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_liquidate(
    _vaultId: BigInt,
    _maxDebtAmount: BigInt
  ): ethereum.CallResult<Controller__liquidateResult> {
    let result = super.tryCall(
      "liquidate",
      "liquidate(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromUnsignedBigInt(_maxDebtAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Controller__liquidateResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  mintPowerPerpAmount(
    _vaultId: BigInt,
    _powerPerpAmount: BigInt,
    _collatAmount: BigInt
  ): Controller__mintPowerPerpAmountResult {
    let result = super.call(
      "mintPowerPerpAmount",
      "mintPowerPerpAmount(uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromUnsignedBigInt(_powerPerpAmount),
        ethereum.Value.fromUnsignedBigInt(_collatAmount)
      ]
    );

    return new Controller__mintPowerPerpAmountResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_mintPowerPerpAmount(
    _vaultId: BigInt,
    _powerPerpAmount: BigInt,
    _collatAmount: BigInt
  ): ethereum.CallResult<Controller__mintPowerPerpAmountResult> {
    let result = super.tryCall(
      "mintPowerPerpAmount",
      "mintPowerPerpAmount(uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromUnsignedBigInt(_powerPerpAmount),
        ethereum.Value.fromUnsignedBigInt(_collatAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Controller__mintPowerPerpAmountResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  mintWPowerPerpAmount(
    _vaultId: BigInt,
    _wPowerPerpAmount: BigInt,
    _collatAmount: BigInt
  ): BigInt {
    let result = super.call(
      "mintWPowerPerpAmount",
      "mintWPowerPerpAmount(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromUnsignedBigInt(_wPowerPerpAmount),
        ethereum.Value.fromUnsignedBigInt(_collatAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintWPowerPerpAmount(
    _vaultId: BigInt,
    _wPowerPerpAmount: BigInt,
    _collatAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintWPowerPerpAmount",
      "mintWPowerPerpAmount(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_vaultId),
        ethereum.Value.fromUnsignedBigInt(_wPowerPerpAmount),
        ethereum.Value.fromUnsignedBigInt(_collatAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  normalizationFactor(): BigInt {
    let result = super.call(
      "normalizationFactor",
      "normalizationFactor():(uint128)",
      []
    );

    return result[0].toBigInt();
  }

  try_normalizationFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "normalizationFactor",
      "normalizationFactor():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  quoteCurrency(): Address {
    let result = super.call("quoteCurrency", "quoteCurrency():(address)", []);

    return result[0].toAddress();
  }

  try_quoteCurrency(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "quoteCurrency",
      "quoteCurrency():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  shortPowerPerp(): Address {
    let result = super.call("shortPowerPerp", "shortPowerPerp():(address)", []);

    return result[0].toAddress();
  }

  try_shortPowerPerp(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "shortPowerPerp",
      "shortPowerPerp():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  underlying(): Address {
    let result = super.call("underlying", "underlying():(address)", []);

    return result[0].toAddress();
  }

  try_underlying(): ethereum.CallResult<Address> {
    let result = super.tryCall("underlying", "underlying():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  underlyingPool(): Address {
    let result = super.call("underlyingPool", "underlyingPool():(address)", []);

    return result[0].toAddress();
  }

  try_underlyingPool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "underlyingPool",
      "underlyingPool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  underlyingScaler(): BigInt {
    let result = super.call(
      "underlyingScaler",
      "underlyingScaler():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_underlyingScaler(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "underlyingScaler",
      "underlyingScaler():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaults(_vaultId: BigInt): Controller__vaultsResultVaultStruct {
    let result = super.call(
      "vaults",
      "vaults(uint256):((address,uint96,uint128,uint32))",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );

    return changetype<Controller__vaultsResultVaultStruct>(result[0].toTuple());
  }

  try_vaults(
    _vaultId: BigInt
  ): ethereum.CallResult<Controller__vaultsResultVaultStruct> {
    let result = super.tryCall(
      "vaults",
      "vaults(uint256):((address,uint96,uint128,uint32))",
      [ethereum.Value.fromUnsignedBigInt(_vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Controller__vaultsResultVaultStruct>(value[0].toTuple())
    );
  }

  wPowerPerp(): Address {
    let result = super.call("wPowerPerp", "wPowerPerp():(address)", []);

    return result[0].toAddress();
  }

  try_wPowerPerp(): ethereum.CallResult<Address> {
    let result = super.tryCall("wPowerPerp", "wPowerPerp():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wPowerPerpPool(): Address {
    let result = super.call("wPowerPerpPool", "wPowerPerpPool():(address)", []);

    return result[0].toAddress();
  }

  try_wPowerPerpPool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "wPowerPerpPool",
      "wPowerPerpPool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _shortPowerPerp(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _wPowerPerp(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _underlying(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _quoteCurrency(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _underlyingPool(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _wPowerPerpPool(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _indexScale(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApplyFundingCall extends ethereum.Call {
  get inputs(): ApplyFundingCall__Inputs {
    return new ApplyFundingCall__Inputs(this);
  }

  get outputs(): ApplyFundingCall__Outputs {
    return new ApplyFundingCall__Outputs(this);
  }
}

export class ApplyFundingCall__Inputs {
  _call: ApplyFundingCall;

  constructor(call: ApplyFundingCall) {
    this._call = call;
  }
}

export class ApplyFundingCall__Outputs {
  _call: ApplyFundingCall;

  constructor(call: ApplyFundingCall) {
    this._call = call;
  }
}

export class BurnPowerPerpAmountCall extends ethereum.Call {
  get inputs(): BurnPowerPerpAmountCall__Inputs {
    return new BurnPowerPerpAmountCall__Inputs(this);
  }

  get outputs(): BurnPowerPerpAmountCall__Outputs {
    return new BurnPowerPerpAmountCall__Outputs(this);
  }
}

export class BurnPowerPerpAmountCall__Inputs {
  _call: BurnPowerPerpAmountCall;

  constructor(call: BurnPowerPerpAmountCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _powerPerpAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _withdrawAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnPowerPerpAmountCall__Outputs {
  _call: BurnPowerPerpAmountCall;

  constructor(call: BurnPowerPerpAmountCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BurnWPowerPerpAmountCall extends ethereum.Call {
  get inputs(): BurnWPowerPerpAmountCall__Inputs {
    return new BurnWPowerPerpAmountCall__Inputs(this);
  }

  get outputs(): BurnWPowerPerpAmountCall__Outputs {
    return new BurnWPowerPerpAmountCall__Outputs(this);
  }
}

export class BurnWPowerPerpAmountCall__Inputs {
  _call: BurnWPowerPerpAmountCall;

  constructor(call: BurnWPowerPerpAmountCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _wPowerPerpAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _withdrawAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnWPowerPerpAmountCall__Outputs {
  _call: BurnWPowerPerpAmountCall;

  constructor(call: BurnWPowerPerpAmountCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _collatAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxDebtAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class MintPowerPerpAmountCall extends ethereum.Call {
  get inputs(): MintPowerPerpAmountCall__Inputs {
    return new MintPowerPerpAmountCall__Inputs(this);
  }

  get outputs(): MintPowerPerpAmountCall__Outputs {
    return new MintPowerPerpAmountCall__Outputs(this);
  }
}

export class MintPowerPerpAmountCall__Inputs {
  _call: MintPowerPerpAmountCall;

  constructor(call: MintPowerPerpAmountCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _powerPerpAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _collatAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintPowerPerpAmountCall__Outputs {
  _call: MintPowerPerpAmountCall;

  constructor(call: MintPowerPerpAmountCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class MintWPowerPerpAmountCall extends ethereum.Call {
  get inputs(): MintWPowerPerpAmountCall__Inputs {
    return new MintWPowerPerpAmountCall__Inputs(this);
  }

  get outputs(): MintWPowerPerpAmountCall__Outputs {
    return new MintWPowerPerpAmountCall__Outputs(this);
  }
}

export class MintWPowerPerpAmountCall__Inputs {
  _call: MintWPowerPerpAmountCall;

  constructor(call: MintWPowerPerpAmountCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _wPowerPerpAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _collatAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintWPowerPerpAmountCall__Outputs {
  _call: MintWPowerPerpAmountCall;

  constructor(call: MintWPowerPerpAmountCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemLongCall extends ethereum.Call {
  get inputs(): RedeemLongCall__Inputs {
    return new RedeemLongCall__Inputs(this);
  }

  get outputs(): RedeemLongCall__Outputs {
    return new RedeemLongCall__Outputs(this);
  }
}

export class RedeemLongCall__Inputs {
  _call: RedeemLongCall;

  constructor(call: RedeemLongCall) {
    this._call = call;
  }

  get _wPerpAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemLongCall__Outputs {
  _call: RedeemLongCall;

  constructor(call: RedeemLongCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFeeRateCall extends ethereum.Call {
  get inputs(): SetFeeRateCall__Inputs {
    return new SetFeeRateCall__Inputs(this);
  }

  get outputs(): SetFeeRateCall__Outputs {
    return new SetFeeRateCall__Outputs(this);
  }
}

export class SetFeeRateCall__Inputs {
  _call: SetFeeRateCall;

  constructor(call: SetFeeRateCall) {
    this._call = call;
  }

  get _newFeeRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeRateCall__Outputs {
  _call: SetFeeRateCall;

  constructor(call: SetFeeRateCall) {
    this._call = call;
  }
}

export class SetFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFeeRecipientCall__Inputs {
    return new SetFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFeeRecipientCall__Outputs {
    return new SetFeeRecipientCall__Outputs(this);
  }
}

export class SetFeeRecipientCall__Inputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }

  get _newFeeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRecipientCall__Outputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }
}

export class SetVaultRedemptionDiscountCall extends ethereum.Call {
  get inputs(): SetVaultRedemptionDiscountCall__Inputs {
    return new SetVaultRedemptionDiscountCall__Inputs(this);
  }

  get outputs(): SetVaultRedemptionDiscountCall__Outputs {
    return new SetVaultRedemptionDiscountCall__Outputs(this);
  }
}

export class SetVaultRedemptionDiscountCall__Inputs {
  _call: SetVaultRedemptionDiscountCall;

  constructor(call: SetVaultRedemptionDiscountCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _redemptionDiscount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetVaultRedemptionDiscountCall__Outputs {
  _call: SetVaultRedemptionDiscountCall;

  constructor(call: SetVaultRedemptionDiscountCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateOperatorCall extends ethereum.Call {
  get inputs(): UpdateOperatorCall__Inputs {
    return new UpdateOperatorCall__Inputs(this);
  }

  get outputs(): UpdateOperatorCall__Outputs {
    return new UpdateOperatorCall__Outputs(this);
  }
}

export class UpdateOperatorCall__Inputs {
  _call: UpdateOperatorCall;

  constructor(call: UpdateOperatorCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _operator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateOperatorCall__Outputs {
  _call: UpdateOperatorCall;

  constructor(call: UpdateOperatorCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
